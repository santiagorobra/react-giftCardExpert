{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categorie","ReactDOM","render","document","getElementById"],"mappings":"qMAkCeA,EA/BK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAEHC,mBAAS,IAFN,mBAEhCC,EAFgC,KAEpBC,EAFoB,KAgBvC,OACE,0BAAMC,SATa,SAACC,GACpBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAc,SAAAS,GAAU,OAAKP,GAAL,mBAAoBO,OAC5CN,EAAc,OAMd,2BACEO,KAAK,OACLC,MAAOT,EACPU,SAjBoB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,Y,uBCRdG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,0FAC0EC,UAAUH,GADpF,sBAEFI,MAAMF,GAFJ,cAEfG,EAFe,gBAGAA,EAAKC,OAHL,uBAGdC,EAHc,EAGdA,KACDC,EAAOD,EAAKE,KAAI,SAAAC,GACpB,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXF,IAAKA,EAAIG,OAAOC,iBAAiBZ,QARhB,kBAWdM,GAXc,4CAAH,sDCEPO,EAAc,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAOF,EAAS,EAATA,IAClC,OACE,yBAAKM,UAAU,4BACb,yBAAKC,IAAKP,EAAKQ,IAAKN,IACpB,2BAAIA,KCaKO,EAfC,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECDJ,SAACA,GAAc,IAAD,EAEdd,mBAAS,CACjCqB,KAAM,GACNa,SAAS,IAJ6B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAcxC,OAPAC,qBAAU,WACRxB,EAAQC,GAAUwB,MAAK,SAAAC,GAAI,OAAIH,EAAS,CACtCf,KAAMkB,EACNL,SAAS,SAEV,CAACpB,IAEGqB,EDXyBK,CAAa1B,GAAhCa,EAFiB,EAEvBN,KAAca,EAFS,EAETA,QAErB,OACE,oCACE,wBAAIJ,UAAU,uBAAuBhB,GACpCoB,GAAW,uBAAGJ,UAAU,kBAAb,cACZ,yBAAKA,UAAU,aACZH,EAAOJ,KAAI,SAACC,GAAD,OAAS,kBAAC,EAAD,eAAaiB,IAAKjB,EAAIC,IAAQD,UEU5CkB,EAnBM,WAAO,IAAD,EAEW1C,mBAAS,CAAC,cAFrB,mBAElBQ,EAFkB,KAENT,EAFM,KAIzB,OACE,oCACE,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAEA,4BAEIS,EAAWe,KAAI,SAAAoB,GAAS,OAAI,kBAAC,EAAD,CAAS7B,SAAU6B,EAAWF,IAAKE,U,MCVzEC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.83d8a8f2.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddCategory = ({setCategories}) => {\r\n\r\n  const [inputValue, setInputValue] = useState('');\r\n\r\n  const handleInputChange = (e) => {\r\n    setInputValue(e.target.value);\r\n  }\r\n  \r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if(inputValue.trim().length > 2) {\r\n      setCategories(categories => [inputValue, ...categories]);\r\n      setInputValue('');\r\n    }\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        value={inputValue}\r\n        onChange={handleInputChange}\r\n      />\r\n    </form>\r\n  );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired, \r\n}\r\n\r\nexport default AddCategory;","export const getGifs = async (category) => {\r\n  const url = `https://api.giphy.com/v1/gifs/search?api_key=2DDFQjkOZ599N1rDtQmSiQsigYoLkbWg&q=${encodeURI(category)}&limit=10`;\r\n  const resp = await fetch(url);\r\n  const {data} = await resp.json();\r\n  const gifs = data.map(img => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      img: img.images.downsized_medium.url\r\n    }\r\n  });\r\n  return gifs;\r\n};","import React from 'react'\r\n\r\nexport const GifGridItem = ({title, img}) => {\r\n  return (\r\n    <div className=\"card animate__fadeInDown\">\r\n      <img src={img} alt={title}/>\r\n      <p>{title}</p>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport {useFetchGifs} from '../hooks/useFetchGifs';\r\nimport {GifGridItem} from './GifGridItem';\r\n\r\nconst GifGrid = ({category}) => {\r\n\r\n  const {data: images, loading} = useFetchGifs(category);\r\n  \r\n  return (\r\n    <>\r\n      <h3 className=\"animate__fadeInDown\">{category}</h3>\r\n      {loading && <p className=\"animate__flash\">Loading...</p>}\r\n      <div className=\"card-grid\">\r\n        {images.map((img) => <GifGridItem key={img.id} {...img}/>)}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GifGrid;","import {useState, useEffect} from 'react';\r\nimport {getGifs} from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n\r\n  useEffect(() => {\r\n    getGifs(category).then(imgs => setState({\r\n      data: imgs,\r\n      loading: false\r\n    }));\r\n  }, [category]);\r\n\r\n  return state;\r\n};","import React, {useState} from 'react';\r\nimport AddCategory from './components/AddCategory';\r\nimport GifGrid from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n  const [categories, setCategories] = useState(['One Punch']);\r\n\r\n  return(\r\n    <>\r\n      <h2>GifExpertApp</h2>\r\n      <AddCategory setCategories={setCategories}/>\r\n      <hr/>\r\n      {/* <button onClick={handleAdd} >Agregar</button> */}\r\n      <ol>\r\n        {\r\n          categories.map(categorie => <GifGrid category={categorie} key={categorie}/>)\r\n        }\r\n      </ol>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}